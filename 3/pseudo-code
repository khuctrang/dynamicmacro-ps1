FUNCTION Rouwenhorst(n, p, q):
    IF n == 2:
        RETURN [[p, 1 - p], [1 - q, q]]
    
    P_n-1 = Rouwenhorst(n-1, p, q)  # Recursively get (n-1) transition matrix

    Create new (n x n) matrix P_n filled with zeros

    FOR i = 1 to n-1:
        FOR j = 1 to n-1:
            P_n[i, j] += p * P_n-1[i, j]
            P_n[i, j+1] += (1 - p) * P_n-1[i, j]
            P_n[i+1, j] += (1 - q) * P_n-1[i, j]
            P_n[i+1, j+1] += q * P_n-1[i, j]

    Normalize each row of P_n to sum to 1

    RETURN P_n

FUNCTION ComputeStateVector(n, gamma, sigma):
    sigma_y = sigma / sqrt(1 - gamma^2)
    RETURN linspace(-sigma_y * sqrt(n-1), sigma_y * sqrt(n-1), n)

# Main function to call:
p = (1 + gamma1) / 2
q = p
P = Rouwenhorst(n, p, q)
S = ComputeStateVector(n, gamma1, sigma)

RETURN P, S  # Transition matrix and state vector
